{% extends 'baseUser.html.twig' %}

{% block title %}New Message{% endblock %}

{% block container %}

    <section id="main-content">
        <div style="width: auto; length: auto ">
            <div class="app-content">
                <div style="padding-bottom: 20px;  margin: 10px 0 0px;  border-bottom: 1px solid #eee;">
                    <div style="padding-bottom: 20px;  margin: 10px 0 0px;  border-bottom: 1px solid #eee;">

                    </div>

                    <div class="card-header">
                        <div class="card-title"><h3>Envoyer un message</h3></div>
                    </div>
                </div>

                    <div style="width: auto; length: auto " >
                    <div style="width: auto; length: auto ">
                        <div >

                            <div class="btn-toolbar " role="toolbar" aria-label="Programmatic control">

                            </div>
                            <div class="btn-group btn-group-sm " >
                            </div>

                            {{ form_start(form)}}
                            <form>

                                        <div class="form-group">
                                           <div>

                                               <div style="margin-bottom: 20px">
                                               <label class="form-label" for="exampleInputEmail2">Message</label>
                                            <small id="passwordHelpBlock" class="form-text text-muted">
                                                Ce champs est obligatoire
                                            </small>
                                               </div>
                                            {{ form_widget(form.message , {'attr': {'class': 'form-control form-control-user' , 'placeholder' : 'votre message'}} ) }}
                                            {{ form_errors(form.message) }}
                                        </div>
                                        </div>


                                        <div class="form-group mb-0">
                                            <div class="checkbox checkbox-secondary">
                                                {{ form_widget(form) }}
                                                <button type="SubmitType" class="btn btn-primary " style="background-color: #761c19; border-color: #761c19">Envoyer </button>
                                            </div>
                                            <div>
                                                <a  class="btn btn-primary " style="background-color: #761c19; border-color: #761c19" href="{{ path('message_controller_user_index')}}">Consulter mes messages</a>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                {{ form_end(form) }}
                            </div>

                        </div>
                    </div>
                </div>
            </div></div>

        <button id="startRecordingButton">Start recording</button>
        <button id="stopRecordingButton">Stop recording</button>
        <button id="playButton">Play</button>
        <button id="downloadButton">Download</button>

        <script>
            var startRecordingButton = document.getElementById("startRecordingButton");
            var stopRecordingButton = document.getElementById("stopRecordingButton");
            var playButton = document.getElementById("playButton");
            var downloadButton = document.getElementById("downloadButton");


            var leftchannel = [];
            var rightchannel = [];
            var recorder = null;
            var recordingLength = 0;
            var volume = null;
            var mediaStream = null;
            var sampleRate = 44100;
            var context = null;
            var blob = null;

            startRecordingButton.addEventListener("click", function () {
                // Initialize recorder
                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
                navigator.getUserMedia(
                    {
                        audio: true
                    },
                    function (e) {
                        console.log("user consent");

                        // creates the audio context
                        window.AudioContext = window.AudioContext || window.webkitAudioContext;
                        context = new AudioContext();

                        // creates an audio node from the microphone incoming stream
                        mediaStream = context.createMediaStreamSource(e);

                        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor
                        // bufferSize: the onaudioprocess event is called when the buffer is full
                        var bufferSize = 2048;
                        var numberOfInputChannels = 2;
                        var numberOfOutputChannels = 2;
                        if (context.createScriptProcessor) {
                            recorder = context.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);
                        } else {
                            recorder = context.createJavaScriptNode(bufferSize, numberOfInputChannels, numberOfOutputChannels);
                        }

                        recorder.onaudioprocess = function (e) {
                            leftchannel.push(new Float32Array(e.inputBuffer.getChannelData(0)));
                            rightchannel.push(new Float32Array(e.inputBuffer.getChannelData(1)));
                            recordingLength += bufferSize;
                        }

                        // we connect the recorder
                        mediaStream.connect(recorder);
                        recorder.connect(context.destination);
                    },
                    function (e) {
                        console.error(e);
                    });
            });

            stopRecordingButton.addEventListener("click", function () {

                // stop recording
                recorder.disconnect(context.destination);
                mediaStream.disconnect(recorder);

                // we flat the left and right channels down
                // Float32Array[] => Float32Array
                var leftBuffer = flattenArray(leftchannel, recordingLength);
                var rightBuffer = flattenArray(rightchannel, recordingLength);
                // we interleave both channels together
                // [left[0],right[0],left[1],right[1],...]
                var interleaved = interleave(leftBuffer, rightBuffer);

                // we create our wav file
                var buffer = new ArrayBuffer(44 + interleaved.length * 2);
                var view = new DataView(buffer);

                // RIFF chunk descriptor
                writeUTFBytes(view, 0, 'RIFF');
                view.setUint32(4, 44 + interleaved.length * 2, true);
                writeUTFBytes(view, 8, 'WAVE');
                // FMT sub-chunk
                writeUTFBytes(view, 12, 'fmt ');
                view.setUint32(16, 16, true); // chunkSize
                view.setUint16(20, 1, true); // wFormatTag
                view.setUint16(22, 2, true); // wChannels: stereo (2 channels)
                view.setUint32(24, sampleRate, true); // dwSamplesPerSec
                view.setUint32(28, sampleRate * 4, true); // dwAvgBytesPerSec
                view.setUint16(32, 4, true); // wBlockAlign
                view.setUint16(34, 16, true); // wBitsPerSample
                // data sub-chunk
                writeUTFBytes(view, 36, 'data');
                view.setUint32(40, interleaved.length * 2, true);

                // write the PCM samples
                var index = 44;
                var volume = 1;
                for (var i = 0; i < interleaved.length; i++) {
                    view.setInt16(index, interleaved[i] * (0x7FFF * volume), true);
                    index += 2;
                }

                // our final blob
                blob = new Blob([view], { type: 'audio/wav' });
            });

            playButton.addEventListener("click", function () {
                if (blob == null) {
                    return;
                }

                var url = window.URL.createObjectURL(blob);
                var audio = new Audio(url);
                audio.play();
            });

            downloadButton.addEventListener("click", function () {
                if (blob == null) {
                    return;
                }

                var url = URL.createObjectURL(blob);

                var a = document.createElement("a");
                document.body.appendChild(a);
                a.style = "display: none";
                a.href = url;
                a.download = "sample.wav";
                a.click();
                window.URL.revokeObjectURL(url);
            });

            function flattenArray(channelBuffer, recordingLength) {
                var result = new Float32Array(recordingLength);
                var offset = 0;
                for (var i = 0; i < channelBuffer.length; i++) {
                    var buffer = channelBuffer[i];
                    result.set(buffer, offset);
                    offset += buffer.length;
                }
                return result;
            }

            function interleave(leftChannel, rightChannel) {
                var length = leftChannel.length + rightChannel.length;
                var result = new Float32Array(length);

                var inputIndex = 0;

                for (var index = 0; index < length;) {
                    result[index++] = leftChannel[inputIndex];
                    result[index++] = rightChannel[inputIndex];
                    inputIndex++;
                }
                return result;
            }

            function writeUTFBytes(view, offset, string) {
                for (var i = 0; i < string.length; i++) {
                    view.setUint8(offset + i, string.charCodeAt(i));
                }
            }

        </script>
    </section>
{% endblock %}

